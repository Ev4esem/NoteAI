package kafka

import (
	"context"
	"github.com/segmentio/kafka-go"
	"log"
	"noteai/config"
	"noteai/internal/gpt"
	"noteai/internal/miniio"
	"noteai/storage"
)

func Consumer() {
	ctx := context.Background()
	miniio.StartMinIO()

	reader := kafka.NewReader(kafka.ReaderConfig{
		Brokers: []string{url},
		Topic:   topic,
		GroupID: group,
	})
	defer reader.Close()

	for {
		msg, err := reader.ReadMessage(ctx)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è:", err)
			continue
		}

		audioID := string(msg.Key)     // UUID
		extension := string(msg.Value) // .mp3 /

		objectName := audioID + extension

		log.Printf("üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ ID: %s", audioID)

		audioData, err := miniio.DownloadFromMinIO(objectName)
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ MinIO:", err)
			storage.SetErrorState(audioID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
			continue
		}

		// 1 —ç—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
		txtWhisper, errWhisp := gpt.CallChatGptWhisper(config.AppConfig.CHATGPT, objectName, audioData)
		if txtWhisper == "" || errWhisp != nil {
			log.Println("‚ùå Whisper –æ—à–∏–±–∫–∞:", errWhisp)
			storage.SetErrorState(audioID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Whisper: "+errWhisp.Error())
			continue
		}

		// 2 —ç—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
		respGPT, errGPT := gpt.CallAssistant(txtWhisper)
		if respGPT == nil || *respGPT == "" || errGPT != nil {
			log.Println("‚ùå Assistant –æ—à–∏–±–∫–∞:", errGPT)
			storage.SetErrorState(audioID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ChatGPT: "+errGPT.Error())
			continue
		}

		errWriteReadyState := storage.SetReadyState(audioID, *respGPT)
		if errWriteReadyState != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", err)
			continue
		}

		if err := reader.CommitMessages(ctx, msg); err != nil {
			log.Println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞:", err)
			continue
		}
		miniio.DeleteAudio(objectName)

		log.Printf("‚úÖ –ì–æ—Ç–æ–≤–æ: %s", audioID)
	}
}
