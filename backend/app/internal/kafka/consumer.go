package kafka

import (
	"context"
	"github.com/segmentio/kafka-go"
	"log"
	"noteai/config"
	"noteai/internal/gpt"
	"noteai/storage"
)

func Consumer() {
	ctx := context.Background()
	reader := kafka.NewReader(kafka.ReaderConfig{
		Brokers: []string{url},
		Topic:   topic,
		GroupID: group,
	})
	defer reader.Close()

	for {
		msg, err := reader.ReadMessage(ctx)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è:", err)
			continue
		}

		kafkaKey := string(msg.Key)

		log.Printf("üì• –ü–æ–ª—É—á–µ–Ω–æ: \n %s: %s", kafkaKey)

		// 1 —ç—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
		txtWhisper, errWhisp := gpt.CallChatGptWhisper(config.AppConfig.CHATGPT, msg.Value)
		if txtWhisper == "" {
			err := storage.SetErrorState(kafkaKey, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª"+errWhisp.Error())
			if err != nil {
				log.Println("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–¥" + err.Error())
				continue
			}
		}

		// 2 —ç—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
		respGPT, errWhisp := gpt.CallChatGPT(config.AppConfig.CHATGPT, txtWhisper)
		if respGPT == "" {
			err := storage.SetErrorState(kafkaKey, "–ò–ò –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ"+errWhisp.Error())
			if err != nil {
				log.Println("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–¥" + err.Error())
				continue
			}
		}

		errWriteReadyState := storage.SetReadyState(kafkaKey, respGPT)
		if errWriteReadyState != nil {
			log.Println("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–¥" + err.Error())
			continue
		}

		errCommit := reader.CommitMessages(ctx, msg)
		if errCommit != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ:", errCommit)
			continue
		}
		log.Println("–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–æ–º–∏—á–µ–Ω–æ –∏ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
	}
}
